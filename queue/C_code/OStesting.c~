#include <stdio.h> 
#include <string.h>
#include <signal.h>
#include <time.h>

void func1();
void func2();
void func3();
void sect_wrap( void (*)());
static struct queue *run_q;

#include "threads.h"

int main(){
  
  srand( time( NULL));

  run_q = init_queue();
  printf( "address of run_q: %d\n", run_q);
  printf( "address of main: %d", &main);
  

  printf( "\n|------------\n");
  start_thread( func1);
  start_thread( func2);
  start_thread( func3);
  // start_thread( (&main + 44));
  print_q( run_q);
  printf( "\n------------|\n");

  sect_wrap( run);
  printf( "time to stop.\n");

  return 0;
}

int func1( ){
  //dummy function 1 for use with context switching
  printf( "it's just a function...\n");
  return 0;
 // sect_wrap( yeild);
}

void func2( ){
  //dummy function 2 for use with context switching
  printf( "...it's a function\n");
  return;
//sect_wrap( yeild);
}

void func3( ){
  //dummy function 3 for use with context switching 
  clock_t sometime = clock();
  printf( "%f\n", (float) (sometime / CLOCKS_PER_SEC));
  // printf(  "current time, %s", ctime( &sometime));
  if( (float)(sometime / CLOCKS_PER_SEC) < 30.0){
    sometime = clock() - sometime;
    printf( "%f\n", (float) (sometime / CLOCKS_PER_SEC));
    // sect_wrap( yeild); 
  }else{
    printf( "%f seconds have elapsed, it's time to stop", (float)(sometime / CLOCKS_PER_SEC));
  }
}

void sect_wrap( void (*func)()){
  time_t sometime;
  time( &sometime);

  printf( "\n|--------------- %s\n", ctime( &sometime));
  func();
  printf( "\n---------------|\n");
  sect_wrap( yeild);
}
