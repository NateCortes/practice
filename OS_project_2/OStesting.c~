#include <stdio.h> 
#include <string.h>
#include <signal.h>
#include <time.h>
#include <stdlib.h>

//#include "threads.h"
#include "semaphore.h"

/*
void func1();
void func2();
void func3();
void sect_wrap( void (*)());

struct pong *field; //animation struct for demonstration
double program_time;//logs runtime
*/
static struct queue *run_q;//ready queue for context swapping
//#include "pong.h"

int main(){
  struct semaphore* sea = gen_s();
  
  init_s( sea, 1);

  printf( "%i\n", sea->val);

  P( sea);
  P( sea);

  V( sea);

  return 0;
}

/*
void func1( ){
  //dummy function 1 for use with context switching

  clock_t time = clock();
  
  int i;
  for( i = 1; i< CLOCKS_PER_SEC / 10; i++){   
    print_pong( field);
    if( i % (CLOCKS_PER_SEC /100 ) == 0){

     shift_right( field);
    }
  }
  
  time = clock() - time;
  program_time += ( (double) time / CLOCKS_PER_SEC * 10);
  printf( " %.2f seconds\n", ((double) time / CLOCKS_PER_SEC) * 10);
  sect_wrap( yeild);
}

void func2( ){
  //dummy function 2 for use with context switching
  
  clock_t time = clock();
  printf( "it's just a function...\n");

  int i;
  for( i = 1; i< CLOCKS_PER_SEC / 10; i++){   
    print_pong( field);
    if( i % (CLOCKS_PER_SEC /100 ) == 0){

     shift_left( field);
    }
  }
 
  time = clock() - time;
  program_time += ( (double) time / CLOCKS_PER_SEC * 10);
  printf( " %.2f seconds\n", ((double) time / CLOCKS_PER_SEC) * 10);
  
  sect_wrap( yeild);
}

void func3( ){
  //dummy function 3 for use with context switching 
  clock_t sometime = clock();
  time( &sometime);
  printf( "->Current time, %s", ctime( &sometime));
  printf( "-->Approximate run time: %.2f seconds\n", program_time);
  yeild();
}

void sect_wrap( void (*func)()){
  //section header to visually aid context switch
  //printf statement seperates the function being called from previous context
  printf( "\n|---------------\n");
  func();
}
*/
