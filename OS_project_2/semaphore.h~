#ifndef SEMAPHORE_H
#define SEMAPHORE_H

#include "queue.h"
#include "threads.h"

struct semaphore{
  int val;
  struct queue* q;  
};

struct semaphore* gen_s(){

  struct semaphore *pass = ( struct semaphore*) malloc( sizeof( struct semaphore));
  pass->val = 0;
  pass->q = init_queue();

  return pass;
}

void init_s( struct semaphore* shore, int val){
  shore->val = val;
}

void P( struct semaphore* shore){
  shore->val--;
  int i = 0;
  while( shore->val <= 0){
    if( i < 60000){
      printf( "\rwaiting ");
    }else if( 60000<= i && i<120000){
      printf( "\rwaiting. ");
    }else if( 120000<= i && i <180000){
      printf( "\rwaiting. .");
    }else if( 180000<= i && i <240000){
      printf( "\rwaiting. . .");
    }else if( i > 240000){ 
      printf( "\rwaiting           ");
      i = 0;      
    }
   
    i++;
  }
 
  
}

void V( struct semaphore* shore){
  shore->val++;
  if( shore->val <= 0){
    printf( "placing TCB into run queue\n");
    enqueue( run_q, dequeue(  shore->q));
  }
}
#endif
